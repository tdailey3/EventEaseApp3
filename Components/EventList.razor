@using EventEaseApp.Models

<table class="table">
    <thead>
        <tr>
            <th class="@(SortColumn == nameof(EventCardModel.EventIntId) ? "table-active" : "")">
                <button class="btn btn-link p-0 text-decoration-none" @onclick="() => OnSort.InvokeAsync(nameof(EventCardModel.EventIntId))">
                    <span class="fw-semibold">ID</span>
                    <span>@GetSortIcon(nameof(EventCardModel.EventIntId))</span>
                </button>
            </th>
            <th class="@(SortColumn == nameof(EventCardModel.EventName) ? "table-active" : "")">
                <button class="btn btn-link p-0 text-decoration-none" @onclick="() => OnSort.InvokeAsync(nameof(EventCardModel.EventName))">
                    <span class="fw-semibold">Name</span>
                    <span>@GetSortIcon(nameof(EventCardModel.EventName))</span>
                </button>
            </th>
            <th class="@(SortColumn == nameof(EventCardModel.EventDate) ? "table-active" : "")">
                <button class="btn btn-link p-0 text-decoration-none" @onclick="() => OnSort.InvokeAsync(nameof(EventCardModel.EventDate))">
                    <span class="fw-semibold">Date</span>
                    <span>@GetSortIcon(nameof(EventCardModel.EventDate))</span>
                </button>
            </th>
            <th class="@(SortColumn == nameof(EventCardModel.Location) ? "table-active" : "")">
                <button class="btn btn-link p-0 text-decoration-none" @onclick="() => OnSort.InvokeAsync(nameof(EventCardModel.Location))">
                    <span class="fw-semibold">Location</span>
                    <span>@GetSortIcon(nameof(EventCardModel.Location))</span>
                </button>
            </th>
            <th class="@(SortColumn == nameof(EventCardModel.IsCompleted) ? "table-active" : "")">
                <button class="btn btn-link p-0 text-decoration-none" @onclick="() => OnSort.InvokeAsync(nameof(EventCardModel.IsCompleted))">
                    <span class="fw-semibold">Status</span>
                    <span>@GetSortIcon(nameof(EventCardModel.IsCompleted))</span>
                </button>
            </th>
            <th class="fw-semibold">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var evt in Events)
        {
            <tr @key="evt.Id">
                <td>@evt.EventIntId</td>
                <td>@evt.EventName</td>
                <td>@evt.EventDate?.ToString("MMMM dd, yyyy")</td>
                <td>@evt.Location</td>
                <td>
                    @if (evt.IsCompleted)
                    {
                        <span class="badge bg-success">Completed</span>
                    }
                    else
                    {
                        <span class="badge bg-warning text-dark">Pending</span>
                    }
                </td>
                <td>
                    @if (!evt.IsCompleted)
                    {
                        <button class="btn btn-sm btn-success me-1" @onclick="() => OnComplete.InvokeAsync(evt.Id)">Complete</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-secondary me-1" @onclick="() => OnUndoComplete.InvokeAsync(evt.Id)">Undo</button>
                    }
                    <button class="btn btn-sm btn-info me-1" @onclick="() => OnEdit.InvokeAsync(evt.Id)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => OnDelete.InvokeAsync(evt.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter] public IEnumerable<EventCardModel> Events { get; set; } = Enumerable.Empty<EventCardModel>();
    [Parameter] public string SortColumn { get; set; } = "";
    [Parameter] public bool SortAscending { get; set; }
    [Parameter] public EventCallback<string> OnSort { get; set; }
    [Parameter] public EventCallback<Guid> OnComplete { get; set; }
    [Parameter] public EventCallback<Guid> OnUndoComplete { get; set; }
    [Parameter] public EventCallback<Guid> OnEdit { get; set; }
    [Parameter] public EventCallback<Guid> OnDelete { get; set; }

    private string GetSortIcon(string column)
    {
        if (SortColumn != column) return "";
        return SortAscending ? "▲" : "▼";
    }
}